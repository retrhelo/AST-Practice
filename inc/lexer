/* -*- C++ -*- */

#pragma once

#include <iostream>
#include <string>

typedef enum {
	tokenUndefined, 
	tokenEOF, 
	tokenIdent, 
	tokenInt, 
	tokenDouble, 
	tokenChar, 
	tokenStr, 

	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, 
	keywordReturn, keywordBreak, keywordContinue, 
	keywordSizeof, 
	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, 
	keywordVoid, keywordChar, keywordShort, keywordInt, 
	keywordUnsigned, keywordSigned, keywordLong, 
	keywordFloat, keywordDouble, 
	keywordStruct, keywordUnion, keywordEnum, 

	punctLBrace, punctRBrace, 
	punctLParen, punctRParen, 
	punctLBracket, punctRBracket, 
	punctSemicolon, punctArrow, 
	punctComma, punctPeriod, 
	punctQuestion, punctColon, 

	/* algorithm */
	punctPlus, punctPlusAssign, punctPlusPlus, 
	punctMinus, punctMinusAssign, punctMinusMinus, 
	punctTimes, punctTimesAssign, 
	punctDivide, punctDivideAssign, 
	punctModulo, punctModuloAssign, 
	punctAssign, 
	/* compare */
	punctEqual, punctNotEqual, 
	punctGreater, punctGreaterEqual, 
	punctLess, punctLessEqual, 
	/* bitwise */
	punctBitwiseAnd, punctBitwiseAndAssign, 
	punctBitwiseOr, punctBitwiseOrAssign, 
	punctBitwiseXor, punctBitwiseXorAssign, 
	punctBitwiseNot, 
	punctShr, punctShrAssign, 
	punctShl, punctShlAssign, 
	/* logical */
	punctLogicalAnd, punctLogicalOr, 
	punctLogicalNot,
} token_t;

class Lexer {
public: 
	Lexer(std::istream &s): 
		token_line(0), token_lineChar(0), type(tokenUndefined), 
		token(""), cur_line(1), cur_lineChar(0), cur_char('\0'), stream(s) { charNext();}

	void next(void);

	int get_line(void) { return token_line;}
	int get_lineChar(void) { return token_lineChar;}
	token_t get_type(void) { return type;}
	std::string get_token(void) { return token;}
private: 
	int token_line;
	int token_lineChar;
	token_t type;
	std::string token;

	int cur_line, cur_lineChar;
	char cur_char;

	std::istream &stream;

	char charNext(void);
	char eatNext(void);
	bool eatTryNext(char ch);

	token_t lexerPunct(void);
};
