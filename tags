!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
Lexer	inc/lexer	/^	Lexer(std::istream &s): $/;"	f	class:Lexer	file:
Lexer	inc/lexer	/^class Lexer {$/;"	c	file:
__anon11f7c11a0208	src/parser.cpp	/^typedef struct {$/;"	s	file:
__anon77b4158e0103	inc/lexer	/^typedef enum {$/;"	g	file:
charNext	src/lexer.cpp	/^char Lexer::charNext(void) {$/;"	f	class:Lexer	typeref:typename:char
cur_char	inc/lexer	/^	char cur_char;$/;"	m	class:Lexer	typeref:typename:char	file:
cur_line	inc/lexer	/^	int cur_line, cur_lineChar;$/;"	m	class:Lexer	typeref:typename:int	file:
cur_lineChar	inc/lexer	/^	int cur_line, cur_lineChar;$/;"	m	class:Lexer	typeref:typename:int	file:
debug_error	src/parser.cpp	/^#define debug_error(/;"	d	file:
debug_msg	src/parser.cpp	/^void debug_msg(char *str) {$/;"	f	typeref:typename:void
debug_msg	src/parser.cpp	/^void debug_msg(std::string &str) {$/;"	f	typeref:typename:void
decoder	src/parser.cpp	/^static std::string decoder(token_t type) {$/;"	f	typeref:typename:std::string	file:
eatNext	src/lexer.cpp	/^char Lexer::eatNext(void) {$/;"	f	class:Lexer	typeref:typename:char
eatTryNext	src/lexer.cpp	/^bool Lexer::eatTryNext(char ch) {$/;"	f	class:Lexer	typeref:typename:bool
enterDebug	src/parser.cpp	/^void enterDebug(std::string str) {$/;"	f	typeref:typename:void
exitDebug	src/parser.cpp	/^void exitDebug(void) {$/;"	f	typeref:typename:void
get_line	inc/lexer	/^	int get_line(void) { return token_line;}$/;"	f	class:Lexer	typeref:typename:int	file:
get_lineChar	inc/lexer	/^	int get_lineChar(void) { return token_lineChar;}$/;"	f	class:Lexer	typeref:typename:int	file:
get_pos	inc/lexer	/^	pos_t get_pos(void) { return token_pos;}$/;"	f	class:Lexer	typeref:typename:pos_t	file:
get_token	inc/lexer	/^	std::string get_token(void) { return token;}$/;"	f	class:Lexer	typeref:typename:std::string	file:
get_type	inc/lexer	/^	token_t get_type(void) { return type;}$/;"	f	class:Lexer	typeref:typename:token_t	file:
is_storage_type	src/parser.cpp	/^static inline bool is_storage_type(token_t type) {$/;"	f	typeref:typename:bool	file:
is_type	src/parser.cpp	/^static inline bool is_type(token_t type) {$/;"	f	typeref:typename:bool	file:
keywordAuto	inc/lexer	/^	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, $/;"	e	enum:__anon77b4158e0103	file:
keywordBreak	inc/lexer	/^	keywordReturn, keywordBreak, keywordContinue, $/;"	e	enum:__anon77b4158e0103	file:
keywordChar	inc/lexer	/^	keywordVoid, keywordChar, keywordShort, keywordInt, $/;"	e	enum:__anon77b4158e0103	file:
keywordConst	inc/lexer	/^	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, $/;"	e	enum:__anon77b4158e0103	file:
keywordContinue	inc/lexer	/^	keywordReturn, keywordBreak, keywordContinue, $/;"	e	enum:__anon77b4158e0103	file:
keywordDo	inc/lexer	/^	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, $/;"	e	enum:__anon77b4158e0103	file:
keywordDouble	inc/lexer	/^	keywordFloat, keywordDouble, $/;"	e	enum:__anon77b4158e0103	file:
keywordElse	inc/lexer	/^	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, $/;"	e	enum:__anon77b4158e0103	file:
keywordEnum	inc/lexer	/^	keywordStruct, keywordUnion, keywordEnum, $/;"	e	enum:__anon77b4158e0103	file:
keywordExtern	inc/lexer	/^	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, $/;"	e	enum:__anon77b4158e0103	file:
keywordFloat	inc/lexer	/^	keywordFloat, keywordDouble, $/;"	e	enum:__anon77b4158e0103	file:
keywordFor	inc/lexer	/^	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, $/;"	e	enum:__anon77b4158e0103	file:
keywordIf	inc/lexer	/^	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, $/;"	e	enum:__anon77b4158e0103	file:
keywordInt	inc/lexer	/^	keywordVoid, keywordChar, keywordShort, keywordInt, $/;"	e	enum:__anon77b4158e0103	file:
keywordLong	inc/lexer	/^	keywordUnsigned, keywordSigned, keywordLong, $/;"	e	enum:__anon77b4158e0103	file:
keywordMatch	src/lexer.cpp	/^static token_t keywordMatch(std::string &str) {$/;"	f	typeref:typename:token_t	file:
keywordReturn	inc/lexer	/^	keywordReturn, keywordBreak, keywordContinue, $/;"	e	enum:__anon77b4158e0103	file:
keywordShort	inc/lexer	/^	keywordVoid, keywordChar, keywordShort, keywordInt, $/;"	e	enum:__anon77b4158e0103	file:
keywordSigned	inc/lexer	/^	keywordUnsigned, keywordSigned, keywordLong, $/;"	e	enum:__anon77b4158e0103	file:
keywordSizeof	inc/lexer	/^	keywordSizeof, $/;"	e	enum:__anon77b4158e0103	file:
keywordStatic	inc/lexer	/^	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, $/;"	e	enum:__anon77b4158e0103	file:
keywordStruct	inc/lexer	/^	keywordStruct, keywordUnion, keywordEnum, $/;"	e	enum:__anon77b4158e0103	file:
keywordUnion	inc/lexer	/^	keywordStruct, keywordUnion, keywordEnum, $/;"	e	enum:__anon77b4158e0103	file:
keywordUnsigned	inc/lexer	/^	keywordUnsigned, keywordSigned, keywordLong, $/;"	e	enum:__anon77b4158e0103	file:
keywordVoid	inc/lexer	/^	keywordVoid, keywordChar, keywordShort, keywordInt, $/;"	e	enum:__anon77b4158e0103	file:
keywordVolatile	inc/lexer	/^	keywordConst, keywordAuto, keywordStatic, keywordVolatile, keywordExtern, $/;"	e	enum:__anon77b4158e0103	file:
keywordWhile	inc/lexer	/^	keywordIf, keywordElse, keywordWhile, keywordDo, keywordFor, $/;"	e	enum:__anon77b4158e0103	file:
lexerPunct	src/lexer.cpp	/^token_t Lexer::lexerPunct(void) {$/;"	f	class:Lexer	typeref:typename:token_t
main	src/lexer_test.cpp	/^int main(void) {$/;"	f	typeref:typename:int
next	src/lexer.cpp	/^void Lexer::next(void) {$/;"	f	class:Lexer	typeref:typename:void
parserArg	src/parser.cpp	/^static bool parserArg(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserArgList	src/parser.cpp	/^static bool parserArgList(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserComplex	src/parser.cpp	/^static bool parserComplex(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserEnumDef	src/parser.cpp	/^static bool parserEnumDef(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserFuncDef	src/parser.cpp	/^static bool parserFuncDef(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserIf	src/parser.cpp	/^static bool parserIf(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserJump	src/parser.cpp	/^static bool parserJump(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserProgramme	src/parser.cpp	/^bool parserProgramme(Lexer Lexer &lexlex, int indent) {$/;"	f	typeref:typename:bool
parserStructUnionDef	src/parser.cpp	/^static bool parserStructUnionDef(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
parserVarDef	src/parser.cpp	/^static bool parserVarDef(Lexer &lex, int indent) {$/;"	f	typeref:typename:bool	file:
pos_t	inc/lexer	/^	typedef std::streampos pos_t;$/;"	t	class:Lexer	typeref:typename:std::streampos	file:
println_indent	src/parser.cpp	/^static void println_indent(std::string str, int indent) {$/;"	f	typeref:typename:void	file:
punctArrow	inc/lexer	/^	punctSemicolon, punctArrow, $/;"	e	enum:__anon77b4158e0103	file:
punctAssign	inc/lexer	/^	punctAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseAnd	inc/lexer	/^	punctBitwiseAnd, punctBitwiseAndAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseAndAssign	inc/lexer	/^	punctBitwiseAnd, punctBitwiseAndAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseNot	inc/lexer	/^	punctBitwiseNot, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseOr	inc/lexer	/^	punctBitwiseOr, punctBitwiseOrAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseOrAssign	inc/lexer	/^	punctBitwiseOr, punctBitwiseOrAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseXor	inc/lexer	/^	punctBitwiseXor, punctBitwiseXorAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctBitwiseXorAssign	inc/lexer	/^	punctBitwiseXor, punctBitwiseXorAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctColon	inc/lexer	/^	punctQuestion, punctColon, $/;"	e	enum:__anon77b4158e0103	file:
punctComma	inc/lexer	/^	punctComma, punctPeriod, $/;"	e	enum:__anon77b4158e0103	file:
punctDivide	inc/lexer	/^	punctDivide, punctDivideAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctDivideAssign	inc/lexer	/^	punctDivide, punctDivideAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctEqual	inc/lexer	/^	punctEqual, punctNotEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctGreater	inc/lexer	/^	punctGreater, punctGreaterEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctGreaterEqual	inc/lexer	/^	punctGreater, punctGreaterEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctLBrace	inc/lexer	/^	punctLBrace, punctRBrace, $/;"	e	enum:__anon77b4158e0103	file:
punctLBracket	inc/lexer	/^	punctLBracket, punctRBracket, $/;"	e	enum:__anon77b4158e0103	file:
punctLParen	inc/lexer	/^	punctLParen, punctRParen, $/;"	e	enum:__anon77b4158e0103	file:
punctLess	inc/lexer	/^	punctLess, punctLessEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctLessEqual	inc/lexer	/^	punctLess, punctLessEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctLogicalAnd	inc/lexer	/^	punctLogicalAnd, punctLogicalOr, $/;"	e	enum:__anon77b4158e0103	file:
punctLogicalNot	inc/lexer	/^	punctLogicalNot,$/;"	e	enum:__anon77b4158e0103	file:
punctLogicalOr	inc/lexer	/^	punctLogicalAnd, punctLogicalOr, $/;"	e	enum:__anon77b4158e0103	file:
punctMinus	inc/lexer	/^	punctMinus, punctMinusAssign, punctMinusMinus, $/;"	e	enum:__anon77b4158e0103	file:
punctMinusAssign	inc/lexer	/^	punctMinus, punctMinusAssign, punctMinusMinus, $/;"	e	enum:__anon77b4158e0103	file:
punctMinusMinus	inc/lexer	/^	punctMinus, punctMinusAssign, punctMinusMinus, $/;"	e	enum:__anon77b4158e0103	file:
punctModulo	inc/lexer	/^	punctModulo, punctModuloAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctModuloAssign	inc/lexer	/^	punctModulo, punctModuloAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctNotEqual	inc/lexer	/^	punctEqual, punctNotEqual, $/;"	e	enum:__anon77b4158e0103	file:
punctPeriod	inc/lexer	/^	punctComma, punctPeriod, $/;"	e	enum:__anon77b4158e0103	file:
punctPlus	inc/lexer	/^	punctPlus, punctPlusAssign, punctPlusPlus, $/;"	e	enum:__anon77b4158e0103	file:
punctPlusAssign	inc/lexer	/^	punctPlus, punctPlusAssign, punctPlusPlus, $/;"	e	enum:__anon77b4158e0103	file:
punctPlusPlus	inc/lexer	/^	punctPlus, punctPlusAssign, punctPlusPlus, $/;"	e	enum:__anon77b4158e0103	file:
punctQuestion	inc/lexer	/^	punctQuestion, punctColon, $/;"	e	enum:__anon77b4158e0103	file:
punctRBrace	inc/lexer	/^	punctLBrace, punctRBrace, $/;"	e	enum:__anon77b4158e0103	file:
punctRBracket	inc/lexer	/^	punctLBracket, punctRBracket, $/;"	e	enum:__anon77b4158e0103	file:
punctRParen	inc/lexer	/^	punctLParen, punctRParen, $/;"	e	enum:__anon77b4158e0103	file:
punctSemicolon	inc/lexer	/^	punctSemicolon, punctArrow, $/;"	e	enum:__anon77b4158e0103	file:
punctShl	inc/lexer	/^	punctShl, punctShlAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctShlAssign	inc/lexer	/^	punctShl, punctShlAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctShr	inc/lexer	/^	punctShr, punctShrAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctShrAssign	inc/lexer	/^	punctShr, punctShrAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctTimes	inc/lexer	/^	punctTimes, punctTimesAssign, $/;"	e	enum:__anon77b4158e0103	file:
punctTimesAssign	inc/lexer	/^	punctTimes, punctTimesAssign, $/;"	e	enum:__anon77b4158e0103	file:
queue	src/parser.cpp	/^std::deque<token_pair> queue;$/;"	v	typeref:typename:std::deque<token_pair>
queue_clean	src/parser.cpp	/^static void queue_clean(int indent) {$/;"	f	typeref:typename:void	file:
s	src/parser.cpp	/^std::deque<std::string> s;$/;"	v	typeref:typename:std::deque<std::string>
storageTypeTryMatchNext	src/parser.cpp	/^static bool storageTypeTryMatchNext(Lexer &lex) {$/;"	f	typeref:typename:bool	file:
stream	inc/lexer	/^	std::istream &stream;$/;"	m	class:Lexer	typeref:typename:std::istream &	file:
token	inc/lexer	/^	std::string token;$/;"	m	class:Lexer	typeref:typename:std::string	file:
token	src/parser.cpp	/^	std::string token;$/;"	m	struct:__anon11f7c11a0208	typeref:typename:std::string	file:
tokenChar	inc/lexer	/^	tokenChar, $/;"	e	enum:__anon77b4158e0103	file:
tokenDouble	inc/lexer	/^	tokenDouble, $/;"	e	enum:__anon77b4158e0103	file:
tokenEOF	inc/lexer	/^	tokenEOF, $/;"	e	enum:__anon77b4158e0103	file:
tokenIdent	inc/lexer	/^	tokenIdent, $/;"	e	enum:__anon77b4158e0103	file:
tokenInt	inc/lexer	/^	tokenInt, $/;"	e	enum:__anon77b4158e0103	file:
tokenMatchNext	src/parser.cpp	/^static void tokenMatchNext(Lexer &lex) {$/;"	f	typeref:typename:void	file:
tokenStr	inc/lexer	/^	tokenStr, $/;"	e	enum:__anon77b4158e0103	file:
tokenTryMatchNext	src/parser.cpp	/^static bool tokenTryMatchNext(Lexer &lex, token_t type) {$/;"	f	typeref:typename:bool	file:
tokenUndefined	inc/lexer	/^	tokenUndefined, $/;"	e	enum:__anon77b4158e0103	file:
token_line	inc/lexer	/^	int token_line;$/;"	m	class:Lexer	typeref:typename:int	file:
token_lineChar	inc/lexer	/^	int token_lineChar;$/;"	m	class:Lexer	typeref:typename:int	file:
token_pair	src/parser.cpp	/^} token_pair;$/;"	t	typeref:struct:__anon11f7c11a0208	file:
token_pos	inc/lexer	/^	pos_t token_pos;$/;"	m	class:Lexer	typeref:typename:pos_t	file:
token_t	inc/lexer	/^} token_t;$/;"	t	typeref:enum:__anon77b4158e0103	file:
type	inc/lexer	/^	token_t type;$/;"	m	class:Lexer	typeref:typename:token_t	file:
type	src/parser.cpp	/^	token_t type;$/;"	m	struct:__anon11f7c11a0208	typeref:typename:token_t	file:
typeTryMatchNext	src/parser.cpp	/^static bool typeTryMatchNext(Lexer &lex) {$/;"	f	typeref:typename:bool	file:
